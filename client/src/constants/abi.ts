export const abi = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  { inputs: [{ internalType: "address", name: "target", type: "address" }], name: "AddressEmptyCode", type: "error" },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  { inputs: [], name: "FailedInnerCall", type: "error" },
  { inputs: [], name: "ReentrancyGuardReentrantCall", type: "error" },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "uint256", name: "tradeId", type: "uint256" },
      { indexed: false, internalType: "address", name: "approver", type: "address" },
    ],
    name: "TradeApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: "uint256", name: "tradeId", type: "uint256" }],
    name: "TradeCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: "uint256", name: "tradeId", type: "uint256" }],
    name: "TradeCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "uint256", name: "tradeId", type: "uint256" },
      { indexed: false, internalType: "address", name: "initiator", type: "address" },
      { indexed: false, internalType: "address", name: "counterparty", type: "address" },
    ],
    name: "TradeInitiated",
    type: "event",
  },
  {
    inputs: [{ internalType: "uint256", name: "tradeId", type: "uint256" }],
    name: "approveTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_tradeId", type: "uint256" }],
    name: "cancelTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "feePercentage",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_tradeId", type: "uint256" }],
    name: "getTradeStatus",
    outputs: [{ internalType: "enum FlexibleEscrow.TradeStatus", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_user", type: "address" }],
    name: "getTradesByAddress",
    outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_counterparty", type: "address" },
      {
        components: [
          { internalType: "enum FlexibleEscrow.TokenType", name: "tokenType", type: "uint8" },
          { internalType: "address", name: "tokenAddress", type: "address" },
          { internalType: "uint256", name: "tokenId", type: "uint256" },
          { internalType: "uint256", name: "amount", type: "uint256" },
        ],
        internalType: "struct FlexibleEscrow.Asset",
        name: "_initiatorAsset",
        type: "tuple",
      },
      {
        components: [
          { internalType: "enum FlexibleEscrow.TokenType", name: "tokenType", type: "uint8" },
          { internalType: "address", name: "tokenAddress", type: "address" },
          { internalType: "uint256", name: "tokenId", type: "uint256" },
          { internalType: "uint256", name: "amount", type: "uint256" },
        ],
        internalType: "struct FlexibleEscrow.Asset",
        name: "_counterpartyAsset",
        type: "tuple",
      },
    ],
    name: "initiateTrade",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "uint256", name: "", type: "uint256" },
    ],
    name: "isNFTInEscrow",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "", type: "address" },
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "bytes", name: "", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_newFeePercentage", type: "uint256" }],
    name: "setFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeCounter",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "tradeStatus",
    outputs: [{ internalType: "enum FlexibleEscrow.TradeStatus", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "trades",
    outputs: [
      { internalType: "address", name: "initiator", type: "address" },
      { internalType: "address", name: "counterparty", type: "address" },
      {
        components: [
          { internalType: "enum FlexibleEscrow.TokenType", name: "tokenType", type: "uint8" },
          { internalType: "address", name: "tokenAddress", type: "address" },
          { internalType: "uint256", name: "tokenId", type: "uint256" },
          { internalType: "uint256", name: "amount", type: "uint256" },
        ],
        internalType: "struct FlexibleEscrow.Asset",
        name: "initiatorAsset",
        type: "tuple",
      },
      {
        components: [
          { internalType: "enum FlexibleEscrow.TokenType", name: "tokenType", type: "uint8" },
          { internalType: "address", name: "tokenAddress", type: "address" },
          { internalType: "uint256", name: "tokenId", type: "uint256" },
          { internalType: "uint256", name: "amount", type: "uint256" },
        ],
        internalType: "struct FlexibleEscrow.Asset",
        name: "counterpartyAsset",
        type: "tuple",
      },
      { internalType: "bool", name: "initiatorApproved", type: "bool" },
      { internalType: "bool", name: "counterpartyApproved", type: "bool" },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;
